/*
*	A singly linked list program that takes in intigers and creates a linked list 
*	and orders them from least to greatest. There is also a deletion method that
*	traverses the linked and finds the proper node to delete and connects the nodes again.
*	It will use the toString() to print the linked list. 
*	The Node class and toString() are taken from the source code from the assignment.
*/

public class SinglyLinkedList {
	//Node class from source code
	 public class Node {
		 int   data;
		 Node  next;
		 
		 public Node () {
			 this (0, null);
		 }
		 
		 public Node (int data) {
			 this(data, null);
		 }
		 
		 public Node(int data, Node next) {
			 this.data = data;
			 this.next = next;
		 }
	 }
	 
	 private Node head;
	 //Method that traverses the linked list and checks if its greater than the compared
	 public void insert(int data) {  
		 Node newNode = new Node(data);  
		 if(isEmpty()){
			 head = newNode;
		 }else if(data<head.data) { //checks if its larger than head
			 newNode.next = head;
			 head = newNode;
		 }else {
			 Node temp = head.next;
			 Node prev = head;
			 while(temp!=null && data > temp.data){
				 prev = temp;
				 temp = temp.next;
			 }
			 prev.next = newNode;
			 newNode.next = temp;
		 }
	 }

	 public void delete(int data){
		 Node prev = null;
		 Node temp = head;
		 while(!isEmpty() && temp.data!=data){ //finds the data a stops the traverse
			 prev = temp;
			 temp = temp.next;
		 }
		 if(!isEmpty()){ 
            if(head.data==data){ //checks if head is to be deleted
            	head = head.next;
            }else{
            	prev.next = temp.next;
            }
		 }
	 }
	 public boolean isEmpty() {
		 return head == null;
	 }
	 //toString() to print the linked list. method from source code
	 public String  toString() {
		 String s = "";
		 if (isEmpty()) { 
			 return "Empty String" ;
		 }
		 for (Node p = head; p != null; p = p.next) 
			 s += p.data + " ";
		 return s;
	 }
    //Main
    public static void main(String[] args) {
		 SinglyLinkedList list = new SinglyLinkedList();
	      
		  System.out.println("Execution begun");
		  
		  System.out.println("initial list: " + list );
		  // testing
		  list.insert(3);
		  list.insert(5);
		  System.out.println(list);
		  
		  list.insert(2);
		  list.insert(2);
		  list.insert(2);
		  list.insert(7);
		  list.insert(6);
		  System.out.println("list after inserts: " + list);
		  
		  list.delete(2);
		  list.delete(5);
		  list.delete(7);
		  System.out.println("list after deletes: " + list);
		      
		  System.out.println("Execution terminated");
	 }
}
